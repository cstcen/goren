// Code generated by Goren DO NOT EDIT.
package {{.PackageNameApi}}

import (
    "errors"
	"git.tenvine.cn/backend/gore/common"
	"git.tenvine.cn/backend/gore/errorcode/v2"
	"git.tenvine.cn/backend/gore/log"
	{{.PackageNameApiGen}} "{{.ModuleName}}/goren/{{.PackageNameApi}}/gen"
	"github.com/gin-gonic/gin"
)

type Openapi struct {
}

func NewOpenapi() *Openapi {
	return &Openapi{}
}

func (o *Openapi) SucResponder(c *gin.Context, data any) {
	switch x := data.(type) {
	default:
		c.JSON(common.ErrSuccess.GetHttpStatus(), common.NewDataResult(x))
	case []any:
		c.JSON(common.ErrSuccess.GetHttpStatus(), common.NewDataResult(common.NewPageData(x)))
	}
}

func (o *Openapi) ErrResponder(c *gin.Context, err error) {
	var e errorcode.Error
	if errors.As(err, &e) {
		c.AbortWithStatusJSON(e.GetHttpStatus(), e)
	} else {
		c.AbortWithStatusJSON(errorcode.InternalServerError.GetHttpStatus(), errorcode.InternalServerError.WithMsg(err.Error()))
	}
}

func (o *Openapi) MiddlewareAuthentication(c *gin.Context) {

}

func (o *Openapi) RegisterHandlers(router *gin.Engine) {
	{{.PackageNameApiGen}}.RegisterHandlersWithOptions(router, o, {{.PackageNameApiGen}}.GinServerOptions{
		ErrorHandler: func(c *gin.Context, err error, statusCode int) {
			log.WarningCf(c, "request route: %s", err.Error())
			o.ErrResponder(c, errorcode.BadRequest)
		},
		Middlewares: []{{.PackageNameApiGen}}.MiddlewareFunc{o.MiddlewareAuthentication},
	})
}